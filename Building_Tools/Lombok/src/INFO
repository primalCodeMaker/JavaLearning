
Lombok dziala w scopie compileOnly dla Gradle oraz provided dla Mavena
nie ma potrzeby aby byl uruchamiany na poziomie Runtimu
Lombok importuje klase Lombok
    jesli cos jest z klast Lombok.experimental to moze to zostac usuniete

W zakladce Refactor jest opcja Delombok, ktora zamieni w klasie adnotacje na metody z jakich lombok kozysta
    mozna w ten sposob sprawdzic zachowanie zaciaganych metod

Po dodaniu Lomboka do Gradla/Mavena nalezy skonfigurowac IntelliJa

CTRL + ALT + S >>> Plugins
i dodaj Lomboka jesli nie jest domyslnie zainstalowany

oraz sprawdzic kolejne ustawienie, w opcjach wyszukaj AnnotationProcessor i musi byc zaznaczone:
    Enable Annoatation Processing
    Obtain processors from project classpatch

POJO - termin, ktory mowi ze klasa nie zalezy od bibliotek zewnwtrznych (nie ma dodanych zadnych dependencji)

konwencja JAVA Been:
    - posiada prywatne pola, do ktorych mozna sie dostac tylko poprzez gettery i settery
    - gettery i settery spelniaja konwencje getX(), setX()
    - ma dostepny bezargumentowy konstruktor
    - implementuje Serializable

BoilerPlate:
    - taki kod ktorego trzeba napisac duzo aby zrealizowac male zagadnienie
        np: gettery i settery
    - dzieki Lombokowi mozemy ograniczyc taki kod

    @Getter i @Setter:
Jesli wstawimy adnotacje @Getter nad klasa to da nam dostep do wszystkch pol tej klasy
Jesli wstawimy adnotacje @Getter tylko nad wybranym polem to dostepne bedzie tylko to pole
Jesli chcemy wyłączyc tylko wybrane pole z getera albo setera to piszemy adnotacje nad tym polem
   ze specjalnym parametrem >> @Getter(value = AccessLevel.NONE)


    @NonNull
mozna przekazac np: do parametru w metodzie
Dziala jak napisany if == null throw NullPointerException
    @NonNull nie dziala bezposrednio dla pol klasy,
    chyba ze uzyjemy go dla pola final ze zdefoniowanym  @RequiredArgsConstructor

KONSTRUKTORY:
    @NoArgsConstructor - pola nie moga byc final w klasie
                         a jesli sa nalezy dodac ponizszy parametr do adnotacji:
    @NoArgsConstructor(force = true)    <<<< w takim zapisie pola final sa inicjowane wartosciami domyslnymi null dla Klas oraz 0 dla prymitywow
        - oznaczenie @NonNull przy polach nie dziala przy takim rodzaju konstruktora


    @RequiredArgsConstructor - konstruktor ktory pozwala zrobic obiekt klasy z polami
        - final
        - oraz oznaczonymi @NonNull (tylko wtedy pole nie moze byc nullem)

    @AllArgsConstructor - robi konstruktor dla wszystkich pol
    @AllArgsConstructor(staticName = "of")   <<< mozna tez zrobic z parametrem staticName "xxx"
        stwozy to podspodem metode statyczna z konstruktorem o nazwie jaka wpiszemy

    @ToString
        aby wylaczyc jakies pole nalezy dodac przy nim adnotacje @ToString.Exclude
        jesli chemy tylko pojedncze pola dodac do ToStringa do w glownej adnotacji nad klasa piszemy:
          @ToString(onlyExplicitlyIncluded = true)
          i nad polem ktore chcemy dodac: @ToString.Include

    @EqualsAndHashCode
        jak wyzej dostepne opcje wykluczania pol @EqualsAndHashCode.Exclude
            lub dodanie tylko specyficznych pol:
             @EqualsAndHashCode(onlyExplicitlyIncluded = true)
             oraz nad polem @EqualsAndHashCode.Include

    @With
        jesli uzyjemy Withera na jakims obiekcie i zmienimy jedno z jego pol to zostanie stwozony nowy obiekt
            ze wszystkimi polami jak poprzedni, tylko z jednym zmienionym ktore nadpisalismy

        jesli w metodzie With uzyjemy takiej samej wartosci dla nadpizywanego pola to zwroci ten sam obiekt
        metody typu With mozna chainowac
        @With mozna dodac nad klasa lub nad wybranym polem

    @Data
        adnotacja, ktora skraca kod. Dodaje jednoczesnie Gettery, Settery, Equals&Hashcode, ToString i konstruktor bezparametrowy
        jesli ktore pole bedzie final, lub oznaczone jako @NonNull to takie pola zostana dodane do konstruktora
        jesli chcieli bysmy miec dodatkowy konstruktor np ze wszystkimi parametrami nalezy dodac druga adnotacje @AllArgsConstructor

    @Value
        po dodaniu tej adnotacji klasa staje sie niemutowalna
        wszystkie pola sa private final, a sama klasa jest final
            natomiast jesli taka klasa przyjmuje obiekt innej klasy to istnieje mozliwosc,
            ze bedziemy mogli zmienic stan tego obiektu i obiekt przestanie byc niemutowalny

    @Builder (przyklad Employee)
        jesli mamy klase immutable z adnotacja @Value i w konstruktorze jest duzo pol do zdefiniowania, ale nie wszystkie chcemy definiowac
        To dodajemy adnotacje @Builder i pozwala nam to na definiowanie tylko pol ktore nas interesuja podczas tworzenia obiektu
        reszta automatycznie dostanie wartosc domyslna
        Dzieki temu nie trzeba tworzyc wielu konstruktorow

    @SneakyThrows
        podczas robienia metod ktore wymagaja obslugi wyjatkow jak np: IO Exception na operacjah na plikach zew.
        mozna uzyc takiej adnotacji i automatycznie mamy opakowane to w wyjatek.
            Pod spodem lapiemy IO exception i zucamy Runtime Exception


